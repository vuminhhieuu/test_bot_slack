name: PR Notifications to Slack

on:
  issue_comment:
    types: [created]
  pull_request:
    types: [closed]

jobs:
  notify:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Save Slack user map
        run: echo '${{ secrets.SLACK_USER_MAP }}' > usermap.json

      - name: Build helper
        run: |
          cat <<'EOF' > build_mentions.sh
          #!/usr/bin/env bash
          build_mentions() {
            mentions=""
            for u in "$@"; do
              slack_id=$(jq -r --arg user "$u" '.[$user]' usermap.json)
              if [ "$slack_id" != "null" ]; then
                mentions="$mentions <@$slack_id>"
              else
                mentions="$mentions @$u"
              fi
            done
            echo "$mentions"
          }
          EOF
          chmod +x build_mentions.sh

      # --- Khi Dev comment READY ---
      - name: Notify PR Ready
        if: github.event_name == 'issue_comment' && startsWith(github.event.comment.body, 'ready')
        run: |
          source build_mentions.sh

          reviewers=$(echo "${{ github.event.comment.body }}" | grep -o '@[a-zA-Z0-9._-]\+' | tr -d '@')
          mentions=$(build_mentions $reviewers)

          ts=$(curl -s -X POST \
            -H "Authorization: Bearer $SLACK_BOT_TOKEN" \
            -H 'Content-type: application/json' \
            --data "{
              \"channel\": \"${SLACK_CHANNEL_ID}\",
              \"text\": \"ðŸ‘€ PR Ready for Review $mentions\",
              \"blocks\": [
                {
                  \"type\": \"header\",
                  \"text\": {\"type\": \"plain_text\", \"text\": \"ðŸ‘€ PR Ready for Review\"}
                },
                {
                  \"type\": \"section\",
                  \"text\": {\"type\": \"mrkdwn\", \"text\": \"*${{ github.event.issue.title }}*\nAuthor: ${{ github.event.comment.user.login }}\nReviewers: $mentions\n<${{ github.event.issue.html_url }}|ðŸ”— View PR>\"}
                }
              ]
            }" https://slack.com/api/chat.postMessage | jq -r '.ts')

          echo "thread_ts=$ts" >> $GITHUB_ENV
          gh api repos/${{ github.repository }}/issues/${{ github.event.issue.number }}/comments \
            -f body="<!-- slack-thread-ts:$ts -->"
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
          SLACK_CHANNEL_ID: ${{ secrets.SLACK_CHANNEL_ID }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # --- Khi Reviewer comment "comment ..." ---
      - name: Notify Reviewer Feedback
        if: github.event_name == 'issue_comment' && startsWith(github.event.comment.body, 'comment')
        run: |
          source build_mentions.sh

          ts=$(gh api repos/${{ github.repository }}/issues/${{ github.event.issue.number }}/comments \
            --jq '.[] | select(.body | contains("slack-thread-ts")) | .body' | sed -n 's/.*slack-thread-ts:\(.*\)-->.*/\1/p' | tail -n1)

          pr_author="${{ github.event.issue.user.login }}"
          reviewer="${{ github.event.comment.user.login }}"
          assignees=$(gh api repos/${{ github.repository }}/issues/${{ github.event.issue.number }} --jq '.assignees[].login')

          mentions=$(build_mentions $pr_author $reviewer $assignees)

          curl -s -X POST \
            -H "Authorization: Bearer $SLACK_BOT_TOKEN" \
            -H 'Content-type: application/json' \
            --data "{
              \"channel\": \"${SLACK_CHANNEL_ID}\",
              \"thread_ts\": \"$ts\",
              \"text\": \"ðŸ’¬ Review feedback from $reviewer $mentions\",
              \"blocks\": [
                {
                  \"type\": \"section\",
                  \"text\": {\"type\": \"mrkdwn\", \"text\": \"ðŸ’¬ *$reviewer* commented on the PR:\n>>> ${{ github.event.comment.body }}\n\n$mentions\n<${{ github.event.comment.html_url }}|ðŸ”— View Comment>\"}
                }
              ]
            }" https://slack.com/api/chat.postMessage
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
          SLACK_CHANNEL_ID: ${{ secrets.SLACK_CHANNEL_ID }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # --- Khi PR Ä‘Æ°á»£c merged ---
      - name: Notify Merge
        if: github.event.pull_request.merged == true
        run: |
          source build_mentions.sh

          ts=$(gh api repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments \
            --jq '.[] | select(.body | contains("slack-thread-ts")) | .body' | sed -n 's/.*slack-thread-ts:\(.*\)-->.*/\1/p' | tail -n1)

          pr_author="${{ github.event.pull_request.user.login }}"
          merger="${{ github.event.pull_request.merged_by.login }}"
          assignees=$(gh api repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }} --jq '.assignees[].login')

          mentions=$(build_mentions $pr_author $merger $assignees)

          curl -s -X POST \
            -H "Authorization: Bearer $SLACK_BOT_TOKEN" \
            -H 'Content-type: application/json' \
            --data "{
              \"channel\": \"${SLACK_CHANNEL_ID}\",
              \"thread_ts\": \"$ts\",
              \"text\": \"âœ… PR Merged! <!channel> $mentions\",
              \"blocks\": [
                {
                  \"type\": \"header\",
                  \"text\": {\"type\": \"plain_text\", \"text\": \"âœ… PR Merged\"}
                },
                {
                  \"type\": \"section\",
                  \"text\": {\"type\": \"mrkdwn\", \"text\": \"*${{ github.event.pull_request.title }}* has been merged!\nAuthor: $pr_author\nMerged by: $merger\n\n$mentions\n<${{ github.event.pull_request.html_url }}|ðŸ”— View PR>\"}
                }
              ]
            }" https://slack.com/api/chat.postMessage
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
          SLACK_CHANNEL_ID: ${{ secrets.SLACK_CHANNEL_ID }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
