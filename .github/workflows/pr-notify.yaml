name: PR Notifications to Slack

on:
  issue_comment:
    types: [created]
  pull_request:
    types: [closed]

jobs:
  notify:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Load Slack user map
        id: usermap
        run: |
          echo '${{ secrets.SLACK_USER_MAP }}' > usermap.json

      # --- Khi Dev comment READY ---
      - name: Notify PR Ready
        if: github.event_name == 'issue_comment' && startsWith(github.event.comment.body, 'ready')
        id: ready
        run: |
          body="${{ github.event.comment.body }}"

          # T√°ch reviewer t·ª´ comment (vd: "ready @alice @bob")
          reviewers=$(echo "$body" | grep -o '@[a-zA-Z0-9._-]\+' | tr -d '@')

          mentions=""
          for r in $reviewers; do
            slack_id=$(jq -r --arg user "$r" '.[$user]' usermap.json)
            if [ "$slack_id" != "null" ]; then
              mentions="$mentions <@$slack_id>"
            else
              mentions="$mentions @$r"
            fi
          done

          ts=$(curl -s -X POST \
            -H "Authorization: Bearer $SLACK_BOT_TOKEN" \
            -H 'Content-type: application/json' \
            --data "{
              \"channel\": \"${SLACK_CHANNEL_ID}\",
              \"text\": \"üëÄ PR Ready for Review $mentions\",
              \"blocks\": [
                {
                  \"type\": \"section\",
                  \"text\": {
                    \"type\": \"mrkdwn\",
                    \"text\": \"*${{ github.event.issue.title }}*\nAuthor: ${{ github.event.comment.user.login }}\nReviewers: $mentions\n<${{ github.event.issue.html_url }}|View PR>\"
                  }
                }
              ]
            }" https://slack.com/api/chat.postMessage | jq -r '.ts')

          echo "thread_ts=$ts" >> $GITHUB_ENV

          # L∆∞u thread_ts v√†o PR comment ·∫©n
          gh api repos/${{ github.repository }}/issues/${{ github.event.issue.number }}/comments \
            -f body="<!-- slack-thread-ts:$ts -->"
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
          SLACK_CHANNEL_ID: ${{ secrets.SLACK_CHANNEL_ID }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

       # --- Khi Reviewer comment "comment ..." ---
      - name: Notify Reviewer Feedback
        if: github.event_name == 'issue_comment' && contains(github.event.comment.body, 'comment')
        run: |
          # L·∫•y thread_ts ƒë√£ l∆∞u trong PR comment
          ts=$(gh api repos/${{ github.repository }}/issues/${{ github.event.issue.number }}/comments \
            --jq '.[] | select(.body | contains("slack-thread-ts")) | .body' | sed -n 's/.*slack-thread-ts:\(.*\)-->.*/\1/p' | tail -n1)

          # L·∫•y Slack ID c·ªßa PR author
          pr_author="${{ github.event.issue.user.login }}"
          author_id=$(jq -r --arg user "$pr_author" '.[$user]' usermap.json)

          # L·∫•y Slack ID c·ªßa reviewer (ng∆∞·ªùi comment)
          reviewer="${{ github.event.comment.user.login }}"
          reviewer_id=$(jq -r --arg user "$reviewer" '.[$user]' usermap.json)

          # T·∫°o mention list
          mentions=""
          if [ "$author_id" != "null" ]; then
            mentions="$mentions <@$author_id>"
          fi
          if [ "$reviewer_id" != "null" ]; then
            mentions="$mentions <@$reviewer_id>"
          fi

          # G·ª≠i reply v√†o thread, c√≥ mentions
          curl -s -X POST \
            -H "Authorization: Bearer $SLACK_BOT_TOKEN" \
            -H 'Content-type: application/json' \
            --data "{
              \"channel\": \"${SLACK_CHANNEL_ID}\",
              \"text\": \"üìù Review Feedback $mentions\",
              \"blocks\": [
                {
                  \"type\": \"section\",
                  \"text\": {
                    \"type\": \"mrkdwn\",
                    \"text\": \"Reviewer: $reviewer\nüí¨ ${{ github.event.comment.body }}\n$mentions\n<${{ github.event.issue.html_url }}|View Discussion>\"
                  }
                }
              ],
              \"thread_ts\": \"$ts\"
            }" https://slack.com/api/chat.postMessage
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
          SLACK_CHANNEL_ID: ${{ secrets.SLACK_CHANNEL_ID }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # --- Khi PR merged ---
      - name: Notify PR Merged
        if: github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true
        run: |
          ts=$(gh api repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments \
            --jq '.[] | select(.body | contains("slack-thread-ts")) | .body' | sed -n 's/.*slack-thread-ts:\(.*\)-->.*/\1/p' | tail -n1)

          curl -s -X POST \
            -H "Authorization: Bearer $SLACK_BOT_TOKEN" \
            -H 'Content-type: application/json' \
            --data "{
              \"channel\": \"${SLACK_CHANNEL_ID}\",
              \"text\": \"üéâ PR Merged\",
              \"blocks\": [
                {
                  \"type\": \"section\",
                  \"text\": {
                    \"type\": \"mrkdwn\",
                    \"text\": \"*${{ github.event.pull_request.title }}*\nMerged by: ${{ github.event.pull_request.merged_by.login }}\n<${{ github.event.pull_request.html_url }}|View PR>\"
                  }
                }
              ],
              \"thread_ts\": \"$ts\"
            }" https://slack.com/api/chat.postMessage
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
          SLACK_CHANNEL_ID: ${{ secrets.SLACK_CHANNEL_ID }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
